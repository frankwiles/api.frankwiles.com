services:

  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command:
      [
        "/venv/bin/celery",
        "-A",
        "config",
        "worker",
        "--concurrency=10",
        "--loglevel=debug"
      ]
    depends_on:
      - db
      - redis
    env_file:
      - .env
    init: true
    volumes:
      - .:/code
    stop_signal: SIGKILL

  beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command:
      [
        "/venv/bin/celery",
        "-A",
        "config",
        "beat",
        "--loglevel=debug"
      ]
    depends_on:
      - db
      - redis
    env_file:
      - .env
    init: true
    volumes:
      - .:/code
    stop_signal: SIGKILL

  db:
    image: postgres:15.1
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
    expose:
      - "5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready",
          "--host=db",
          "--username=postgres"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    init: true
    user: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data/

  # migrate:
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfile
  #   command: [ "python", "manage.py", "migrate", "--noinput" ]
  #   depends_on:
  #     - db
  #   env_file:
  #     - .env
  #   init: true
  #   volumes:
  #     - .:/code
  #   stop_signal: SIGKILL

  maildev:
    image: maildev/maildev
    init: true
    ports:
      - "1025:25"
      - "1080:80"
    stop_signal: SIGKILL

  redis:
    image: "redis:alpine"
    expose:
      - "6379"
    init: true
    volumes:
      - redis-data:/data
    stop_signal: SIGKILL

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: [ "/bin/bash", "/code/compose-start.sh" ]
    depends_on:
      - db
      - maildev
    env_file:
      - .env
    expose:
      - "8000"
    init: true
    ports:
      - "8000:8000"
    volumes:
      - .:/code

volumes:
  postgres-data:
  redis-data:
